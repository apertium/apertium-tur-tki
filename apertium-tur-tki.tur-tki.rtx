!!!!!!!!!!!!!!!
!! ATTRIBUTE CATEGORIES
!!!!!!!!!!!!!!!

n_number = (ND "") sg pl sp ND;
v_number = (ND sg) sg pl sp ND;
gender = (GD m) m f mf GD;

det_type = def ind dem itg qnt ref ;
prn_type = dem ind pers itg qnt neg ;

v_type = iv tv vaux cop ;

np_type = cog ant pat org top hyd al unk ;

tense = pres past fut ifi fut aor imp unac pih opt fut_plan ;
vadj = gpr_past gpr_impf gpr_fut gpr_hab gpr_pot gpr_ppot gpr_unac ;
vadv = gna_perf gna_impf gna_cond gna_after gna_until ;
ger = ger_past ger_fut ger ger_unac ger_perf ger_obs ger_impf ger_abs ;
inf = prc_perf prc_impf prc_vol prc_cond prc_fplan prc_plan ;
nonfin = [vadj] [vadv] [ger] [inf] ;
fin_nonfin = [tense] [vadj] [vadv] [ger] [inf] ;
comp = comp ;
subst = subst ;

polarity = neg ;

possession = px1sg px1pl px2sg px2pl px3sp ;

case = nom acc gen dat loc abl ins sim equ CD ; ! (CD nom)
attr = attr ;

n_person = (PD p3) p1 p2 p3 PD ;
v_person = (PD "") p1 p2 p3 PD ;
formality = frm ;

transitivity = (TD iv) tv iv ;
voice = caus pass coop ;
voice_a = coop ;
voice_b = caus ;
voice_c = pass ;

advl = advl ;

!!!!!!!!!!!!!!!
!! OUTPUT PATTERNS
!!!!!!!!!!!!!!!

n: %;
det: %;

adj: %;
AP: _ ;
aP: _ ;

adv: %;
postadv: %;
post: % ;

cop: % ;

qst: _ ;
emph: _ ;

v: % ;

!vP: _.v_type.voice_a.voice_b.voice_c.fin_nonfin.polarity.v_person.formality.v_number ;
vP_fin: <vP>.v_type.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin.v_person.formality.v_number ;
vP_vadj: <vP>.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin ;  ! FIXME: allow for subst
vP_vadv: <vP>.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin ;
vP_vadv_cond: <vP>.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin.v_person.formality.v_number ;
vP_inf: <vP>.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin ;
vP_inf_vol: <vP>.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin.v_person.formality.v_number ;
vP_ger: <vP>.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin.n_number.possession.formality.case ;

VP: _.transitivity.voice_a.voice_b.voice_c.fin_nonfin.polarity.v_person.formality.v_number ;

gerP: _.transitivity.voice_a.voice_b.voice_c.fin_nonfin.polarity.possession.case ;

n: % ;
nP: _.n_number.possession.case ;
NP: _.n_number.possession.case ;

np: % ;

prn: % ;

det: % ;

PP: _ ;
AdvP: _ ;
PPorAdvP: _ ;

S: _ ;

!!!!!!!!!!!!!!!
!! TAG-REWRITE RULES
!!!!!!!!!!!!!!!

tense > tense : ifi past, pri pres, fti fut;

!!!!!!!!!!!!!!!
!! MACROS
!!!!!!!!!!!!!!!

vP: (if (1.fin_nonfin in tense)
			1(vP_fin)
		elseif (1.fin_nonfin in vadj)
			1(vP_vadj)
		elseif ((1.fin_nonfin in vadv) and (1.fin_nonfin = gna_cond))
			1(vP_vadv_cond)
		elseif (1.fin_nonfin in vadv)
			1(vP_vadv)
		elseif ((1.fin_nonfin in inf) and (1.fin_nonfin = prc_vol))
			1(vP_inf_vol)
		elseif (1.fin_nonfin in inf)
			1(vP_inf)
		elseif (1.fin_nonfin in ger)
			1(vP_ger)
		);



!!!!!!!!!!!!!!!
!! REDUCTION RULES
!!!!!!!!!!!!!!!

PP ->
		20: NP ?(1.case=ins) [$lemh=менен] { 1[case=nom] _ менен@post } |
		NP %post { 1 _ 2 } ;

AdvP ->
		%adj ?(1.advl=advl) { 1 } |
		%adv { 1 } |
		%AdvP postadv { 1 _ 2 }
		;

PPorAdvP ->
		%PP { 1 } |
		%AdvP { 1 } ;


NP -> ! n.$number adj { 2[gender=1.gender, number=1.number] _1 1 } ;
		20: %adj.subst { %1 } |
		5: %nP { %1 } |
		5: AP %nP { 1 _ %2 } |
		5: det %nP { 1 _ %2 } |
		5: det AP %nP { 1 _ 2 _ %3 } |
		5: %prn { %1 } |
		5: NP.gen %NP.px3sp { 1 %2 } ;

nP ->
		%n { %1 } |
		n %n ?((1.possession = "") and (2.possession = px3sp)) { 1 _ 2 } |
		%np { %1 } ;

aP ->
		%adj { 1 } |
		adv %adj { 1 _ 2 } |
		%aP qst { 1 + 2 } |
		%aP emph { 1 + 2 } |
		%aP postadv { 1 _ 2 } ;

AP ->
		%aP { 1 } ;



vP ->
		%cop [$fin_nonfin=1.fin_nonfin] { 1 } |
		1: %v [$fin_nonfin=1.fin_nonfin] { %1[fin_nonfin=$fin_nonfin,polarity=$polarity] } |
		2: %v ?(1.vadj/sl=gpr_impf) [$fin_nonfin=1.fin_nonfin] { 1[fin_nonfin=prc_impf] _ тур@vaux.gpr_past } |
		%vP qst [$fin_nonfin=1.fin_nonfin] { 1 + 2 } |
		%vP emph [$fin_nonfin=1.fin_nonfin] { 1 + 2 } ;

VP ->
		5: NP %ى@vP [$lemh=1.lemh] (if (2.tense = ifi or 2.fin_nonfin = ger_past) { 1 _ 2 } else { 1 + 2 } ) |
		5: AP %ى@vP [$lemh=1.lemh] (if (2.tense = ifi or 2.fin_nonfin = ger_past) { 1 _ 2 } else { 1 + 2 } ) |
		5: NP %vP ?(1.case = acc) { 1 _ 2 } |
		5: PPorAdvP %vP { 1 _ %2 } |
		5: PPorAdvP NP %vP { 1 _ 2 _ 3 } |
		1: %vP { %1 }
		!1: AP %vP ?(2.v_type=cop) { 1 _1 2 } |
		!2: AP %vP ?(2.v_type=cop & 2.tense=aor) { 1 + 2 } ;
		;

S ->
		NP VP { 1 _ 2 } |
		gerP VP { (
				if ((2.lemh="gerek"))
					[ 1[fin_nonfin=ger] _ 2 ]
				else
					[ 1 _ 2 ]
			) }
	;




! Resources:
! http://wiki.apertium.org/wiki/Apertium-recursive
! http://wiki.apertium.org/wiki/Apertium-recursive/Formalism
! http://wiki.apertium.org/wiki/Apertium-recursive/Cookbook

